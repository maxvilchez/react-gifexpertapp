{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","App","categories","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAY9C,OACE,8BACE,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAAU,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,e,+BClBvEG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVlB,kBAcbM,GAda,4CAAH,sDCENO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OARAC,qBAAU,WACRxB,EAAOC,GACJwB,MAAM,SAAAX,GAAM,OAAIS,EAAS,CACxBf,KAAMM,EACNO,SAAS,SAEZ,CAACpB,IAEGqB,EDZyBI,CAAazB,GAAhCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAiB,GAAK,OACd,cAAC,EAAD,eAAgCA,GAAdA,EAAMf,aEarBgB,MAtBf,WAAgB,IAAD,EAEuBzC,mBAAS,CAAC,gBAFjC,mBAEN0C,EAFM,KAEM3C,EAFN,KAIb,OACE,sBAAK+B,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CAAa/B,cAAeA,IAC5B,uBAGE2C,EAAWnB,KAAI,SAACT,EAAU6B,GACxB,OACE,cAAC,EAAD,CAAqB7B,SAAUA,GAAjB6B,UCNXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eb6b8476.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if(inputValue.trim().length > 2) {\r\n      setCategories( cats => [inputValue, ...cats])\r\n      setInputValue('')\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={inputValue} onChange={e => setInputValue(e.target.value)} />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGif = async (category) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=xHc4PiL9AnbR33S0SWf6DAhyPBWIKM7a`\r\n  const resp = await fetch(url)\r\n  const { data } = await resp.json()\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const {data: images, loading} = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p>Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(image => (\r\n            <GifGridItem key={image.id} {...image} />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGif\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGif(category)\r\n      .then( images => setState({\r\n        data: images,\r\n        loading: false\r\n      }))\r\n  }, [category])\r\n\r\n  return state\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nfunction App() {\n\n  const [categories, setCategories] = useState(['Dragon Ball'])\n  \n  return (\n    <div className=\"App\">\n      <h1>GifExpertApp</h1>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      {\n        categories.map((category, index) => {\n          return (\n            <GifGrid key={index} category={category} />\n          )\n        })\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'animate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}